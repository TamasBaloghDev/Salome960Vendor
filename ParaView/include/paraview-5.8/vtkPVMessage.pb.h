// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vtkPVMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vtkPVMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vtkPVMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vtkPVMessage_2eproto VTKREMOTINGSERVERMANAGER_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct VTKREMOTINGSERVERMANAGER_EXPORT TableStruct_vtkPVMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern VTKREMOTINGSERVERMANAGER_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vtkPVMessage_2eproto;
namespace paraview_protobuf {
class ChartViewBounds;
class ChartViewBoundsDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ChartViewBoundsDefaultTypeInternal _ChartViewBounds_default_instance_;
class ChatMessage;
class ChatMessageDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ClientsInformation;
class ClientsInformationDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ClientsInformationDefaultTypeInternal _ClientsInformation_default_instance_;
class ClientsInformation_ClientInfo;
class ClientsInformation_ClientInfoDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ClientsInformation_ClientInfoDefaultTypeInternal _ClientsInformation_ClientInfo_default_instance_;
class DefinitionHeader;
class DefinitionHeaderDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern DefinitionHeaderDefaultTypeInternal _DefinitionHeader_default_instance_;
class LinkState;
class LinkStateDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern LinkStateDefaultTypeInternal _LinkState_default_instance_;
class LinkState_LinkDescription;
class LinkState_LinkDescriptionDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern LinkState_LinkDescriptionDefaultTypeInternal _LinkState_LinkDescription_default_instance_;
class Message;
class MessageDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageCollection;
class MessageCollectionDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern MessageCollectionDefaultTypeInternal _MessageCollection_default_instance_;
class MousePointer;
class MousePointerDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern MousePointerDefaultTypeInternal _MousePointer_default_instance_;
class PXMRegistrationState;
class PXMRegistrationStateDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern PXMRegistrationStateDefaultTypeInternal _PXMRegistrationState_default_instance_;
class PXMRegistrationState_Entry;
class PXMRegistrationState_EntryDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern PXMRegistrationState_EntryDefaultTypeInternal _PXMRegistrationState_Entry_default_instance_;
class ProxyDefinitionState;
class ProxyDefinitionStateDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyDefinitionStateDefaultTypeInternal _ProxyDefinitionState_default_instance_;
class ProxyDefinitionState_ProxyXMLDefinition;
class ProxyDefinitionState_ProxyXMLDefinitionDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyDefinitionState_ProxyXMLDefinitionDefaultTypeInternal _ProxyDefinitionState_ProxyXMLDefinition_default_instance_;
class ProxySelectionModelState;
class ProxySelectionModelStateDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxySelectionModelStateDefaultTypeInternal _ProxySelectionModelState_default_instance_;
class ProxyState;
class ProxyStateDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyStateDefaultTypeInternal _ProxyState_default_instance_;
class ProxyState_Annotation;
class ProxyState_AnnotationDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyState_AnnotationDefaultTypeInternal _ProxyState_Annotation_default_instance_;
class ProxyState_Property;
class ProxyState_PropertyDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyState_PropertyDefaultTypeInternal _ProxyState_Property_default_instance_;
class ProxyState_SubProxy;
class ProxyState_SubProxyDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyState_SubProxyDefaultTypeInternal _ProxyState_SubProxy_default_instance_;
class ProxyState_UserData;
class ProxyState_UserDataDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern ProxyState_UserDataDefaultTypeInternal _ProxyState_UserData_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class QtEvent;
class QtEventDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern QtEventDefaultTypeInternal _QtEvent_default_instance_;
class Variant;
class VariantDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern VariantDefaultTypeInternal _Variant_default_instance_;
class VariantList;
class VariantListDefaultTypeInternal;
VTKREMOTINGSERVERMANAGER_EXPORT extern VariantListDefaultTypeInternal _VariantList_default_instance_;
}  // namespace paraview_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ChartViewBounds* Arena::CreateMaybeMessage<::paraview_protobuf::ChartViewBounds>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ChatMessage* Arena::CreateMaybeMessage<::paraview_protobuf::ChatMessage>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ClientsInformation* Arena::CreateMaybeMessage<::paraview_protobuf::ClientsInformation>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ClientsInformation_ClientInfo* Arena::CreateMaybeMessage<::paraview_protobuf::ClientsInformation_ClientInfo>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::DefinitionHeader* Arena::CreateMaybeMessage<::paraview_protobuf::DefinitionHeader>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::LinkState* Arena::CreateMaybeMessage<::paraview_protobuf::LinkState>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::LinkState_LinkDescription* Arena::CreateMaybeMessage<::paraview_protobuf::LinkState_LinkDescription>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::Message* Arena::CreateMaybeMessage<::paraview_protobuf::Message>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::MessageCollection* Arena::CreateMaybeMessage<::paraview_protobuf::MessageCollection>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::MousePointer* Arena::CreateMaybeMessage<::paraview_protobuf::MousePointer>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::PXMRegistrationState* Arena::CreateMaybeMessage<::paraview_protobuf::PXMRegistrationState>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::PXMRegistrationState_Entry* Arena::CreateMaybeMessage<::paraview_protobuf::PXMRegistrationState_Entry>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyDefinitionState* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyDefinitionState>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyDefinitionState_ProxyXMLDefinition* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyDefinitionState_ProxyXMLDefinition>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxySelectionModelState* Arena::CreateMaybeMessage<::paraview_protobuf::ProxySelectionModelState>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyState* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyState>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyState_Annotation* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyState_Annotation>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyState_Property* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyState_Property>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyState_SubProxy* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyState_SubProxy>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::ProxyState_UserData* Arena::CreateMaybeMessage<::paraview_protobuf::ProxyState_UserData>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::PullRequest* Arena::CreateMaybeMessage<::paraview_protobuf::PullRequest>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::QtEvent* Arena::CreateMaybeMessage<::paraview_protobuf::QtEvent>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::Variant* Arena::CreateMaybeMessage<::paraview_protobuf::Variant>(Arena*);
template<> VTKREMOTINGSERVERMANAGER_EXPORT ::paraview_protobuf::VariantList* Arena::CreateMaybeMessage<::paraview_protobuf::VariantList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace paraview_protobuf {

enum Variant_Type : int {
  Variant_Type_INT = 0,
  Variant_Type_FLOAT64 = 1,
  Variant_Type_IDTYPE = 2,
  Variant_Type_STRING = 3,
  Variant_Type_PROXY = 4,
  Variant_Type_INPUT = 5,
  Variant_Type_BYTES = 6,
  Variant_Type_MAP = 7
};
VTKREMOTINGSERVERMANAGER_EXPORT bool Variant_Type_IsValid(int value);
constexpr Variant_Type Variant_Type_Type_MIN = Variant_Type_INT;
constexpr Variant_Type Variant_Type_Type_MAX = Variant_Type_MAP;
constexpr int Variant_Type_Type_ARRAYSIZE = Variant_Type_Type_MAX + 1;

VTKREMOTINGSERVERMANAGER_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Variant_Type_descriptor();
template<typename T>
inline const std::string& Variant_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Variant_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Variant_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Variant_Type_descriptor(), enum_t_value);
}
inline bool Variant_Type_Parse(
    const std::string& name, Variant_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Variant_Type>(
    Variant_Type_descriptor(), name, value);
}
enum LinkState_LinkDescription_Direction : int {
  LinkState_LinkDescription_Direction_NONE = 0,
  LinkState_LinkDescription_Direction_INPUT = 1,
  LinkState_LinkDescription_Direction_OUTPUT = 2
};
VTKREMOTINGSERVERMANAGER_EXPORT bool LinkState_LinkDescription_Direction_IsValid(int value);
constexpr LinkState_LinkDescription_Direction LinkState_LinkDescription_Direction_Direction_MIN = LinkState_LinkDescription_Direction_NONE;
constexpr LinkState_LinkDescription_Direction LinkState_LinkDescription_Direction_Direction_MAX = LinkState_LinkDescription_Direction_OUTPUT;
constexpr int LinkState_LinkDescription_Direction_Direction_ARRAYSIZE = LinkState_LinkDescription_Direction_Direction_MAX + 1;

VTKREMOTINGSERVERMANAGER_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkState_LinkDescription_Direction_descriptor();
template<typename T>
inline const std::string& LinkState_LinkDescription_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkState_LinkDescription_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkState_LinkDescription_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkState_LinkDescription_Direction_descriptor(), enum_t_value);
}
inline bool LinkState_LinkDescription_Direction_Parse(
    const std::string& name, LinkState_LinkDescription_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkState_LinkDescription_Direction>(
    LinkState_LinkDescription_Direction_descriptor(), name, value);
}
enum MousePointer_Ratio : int {
  MousePointer_Ratio_BOTH = 0,
  MousePointer_Ratio_HEIGHT = 1,
  MousePointer_Ratio_WIDTH = 2
};
VTKREMOTINGSERVERMANAGER_EXPORT bool MousePointer_Ratio_IsValid(int value);
constexpr MousePointer_Ratio MousePointer_Ratio_Ratio_MIN = MousePointer_Ratio_BOTH;
constexpr MousePointer_Ratio MousePointer_Ratio_Ratio_MAX = MousePointer_Ratio_WIDTH;
constexpr int MousePointer_Ratio_Ratio_ARRAYSIZE = MousePointer_Ratio_Ratio_MAX + 1;

VTKREMOTINGSERVERMANAGER_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MousePointer_Ratio_descriptor();
template<typename T>
inline const std::string& MousePointer_Ratio_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MousePointer_Ratio>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MousePointer_Ratio_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MousePointer_Ratio_descriptor(), enum_t_value);
}
inline bool MousePointer_Ratio_Parse(
    const std::string& name, MousePointer_Ratio* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MousePointer_Ratio>(
    MousePointer_Ratio_descriptor(), name, value);
}
enum QtEvent_QtEventType : int {
  QtEvent_QtEventType_CHAT = 1,
  QtEvent_QtEventType_OTHER = 3
};
VTKREMOTINGSERVERMANAGER_EXPORT bool QtEvent_QtEventType_IsValid(int value);
constexpr QtEvent_QtEventType QtEvent_QtEventType_QtEventType_MIN = QtEvent_QtEventType_CHAT;
constexpr QtEvent_QtEventType QtEvent_QtEventType_QtEventType_MAX = QtEvent_QtEventType_OTHER;
constexpr int QtEvent_QtEventType_QtEventType_ARRAYSIZE = QtEvent_QtEventType_QtEventType_MAX + 1;

VTKREMOTINGSERVERMANAGER_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QtEvent_QtEventType_descriptor();
template<typename T>
inline const std::string& QtEvent_QtEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QtEvent_QtEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QtEvent_QtEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QtEvent_QtEventType_descriptor(), enum_t_value);
}
inline bool QtEvent_QtEventType_Parse(
    const std::string& name, QtEvent_QtEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QtEvent_QtEventType>(
    QtEvent_QtEventType_descriptor(), name, value);
}
// ===================================================================

class VTKREMOTINGSERVERMANAGER_EXPORT Variant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.Variant) */ {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(Variant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variant* New() const final {
    return CreateMaybeMessage<Variant>(nullptr);
  }

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.Variant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Variant_Type Type;
  static constexpr Type INT =
    Variant_Type_INT;
  static constexpr Type FLOAT64 =
    Variant_Type_FLOAT64;
  static constexpr Type IDTYPE =
    Variant_Type_IDTYPE;
  static constexpr Type STRING =
    Variant_Type_STRING;
  static constexpr Type PROXY =
    Variant_Type_PROXY;
  static constexpr Type INPUT =
    Variant_Type_INPUT;
  static constexpr Type BYTES =
    Variant_Type_BYTES;
  static constexpr Type MAP =
    Variant_Type_MAP;
  static inline bool Type_IsValid(int value) {
    return Variant_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Variant_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Variant_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Variant_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Variant_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Variant_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Variant_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdtypeFieldNumber = 3,
    kIntegerFieldNumber = 4,
    kFloat64FieldNumber = 5,
    kProxyGlobalIdFieldNumber = 6,
    kPortNumberFieldNumber = 7,
    kTxtFieldNumber = 8,
    kBinaryFieldNumber = 9,
    kTypeFieldNumber = 1,
  };
  // repeated sint64 idtype = 3;
  int idtype_size() const;
  private:
  int _internal_idtype_size() const;
  public:
  void clear_idtype();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idtype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_idtype() const;
  void _internal_add_idtype(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_idtype();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 idtype(int index) const;
  void set_idtype(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_idtype(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      idtype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_idtype();

  // repeated sint32 integer = 4;
  int integer_size() const;
  private:
  int _internal_integer_size() const;
  public:
  void clear_integer();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_integer(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_integer() const;
  void _internal_add_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_integer();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 integer(int index) const;
  void set_integer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      integer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_integer();

  // repeated double float64 = 5;
  int float64_size() const;
  private:
  int _internal_float64_size() const;
  public:
  void clear_float64();
  private:
  double _internal_float64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_float64() const;
  void _internal_add_float64(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_float64();
  public:
  double float64(int index) const;
  void set_float64(int index, double value);
  void add_float64(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      float64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_float64();

  // repeated uint64 proxy_global_id = 6;
  int proxy_global_id_size() const;
  private:
  int _internal_proxy_global_id_size() const;
  public:
  void clear_proxy_global_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proxy_global_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_proxy_global_id() const;
  void _internal_add_proxy_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_proxy_global_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 proxy_global_id(int index) const;
  void set_proxy_global_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_proxy_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      proxy_global_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_proxy_global_id();

  // repeated int32 port_number = 7;
  int port_number_size() const;
  private:
  int _internal_port_number_size() const;
  public:
  void clear_port_number();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_port_number() const;
  void _internal_add_port_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_port_number();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 port_number(int index) const;
  void set_port_number(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_port_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      port_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_port_number();

  // repeated string txt = 8;
  int txt_size() const;
  private:
  int _internal_txt_size() const;
  public:
  void clear_txt();
  const std::string& txt(int index) const;
  std::string* mutable_txt(int index);
  void set_txt(int index, const std::string& value);
  void set_txt(int index, std::string&& value);
  void set_txt(int index, const char* value);
  void set_txt(int index, const char* value, size_t size);
  std::string* add_txt();
  void add_txt(const std::string& value);
  void add_txt(std::string&& value);
  void add_txt(const char* value);
  void add_txt(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txt();
  private:
  const std::string& _internal_txt(int index) const;
  std::string* _internal_add_txt();
  public:

  // repeated bytes binary = 9;
  int binary_size() const;
  private:
  int _internal_binary_size() const;
  public:
  void clear_binary();
  const std::string& binary(int index) const;
  std::string* mutable_binary(int index);
  void set_binary(int index, const std::string& value);
  void set_binary(int index, std::string&& value);
  void set_binary(int index, const char* value);
  void set_binary(int index, const void* value, size_t size);
  std::string* add_binary();
  void add_binary(const std::string& value);
  void add_binary(std::string&& value);
  void add_binary(const char* value);
  void add_binary(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& binary() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_binary();
  private:
  const std::string& _internal_binary(int index) const;
  std::string* _internal_add_binary();
  public:

  // required .paraview_protobuf.Variant.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::paraview_protobuf::Variant_Type type() const;
  void set_type(::paraview_protobuf::Variant_Type value);
  private:
  ::paraview_protobuf::Variant_Type _internal_type() const;
  void _internal_set_type(::paraview_protobuf::Variant_Type value);
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.Variant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > idtype_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > integer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > float64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > proxy_global_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > port_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> binary_;
  int type_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT VariantList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.VariantList) */ {
 public:
  VariantList();
  virtual ~VariantList();

  VariantList(const VariantList& from);
  VariantList(VariantList&& from) noexcept
    : VariantList() {
    *this = ::std::move(from);
  }

  inline VariantList& operator=(const VariantList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantList& operator=(VariantList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantList* internal_default_instance() {
    return reinterpret_cast<const VariantList*>(
               &_VariantList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VariantList& a, VariantList& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantList* New() const final {
    return CreateMaybeMessage<VariantList>(nullptr);
  }

  VariantList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantList& from);
  void MergeFrom(const VariantList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.VariantList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantFieldNumber = 1,
  };
  // repeated .paraview_protobuf.Variant variant = 1;
  int variant_size() const;
  private:
  int _internal_variant_size() const;
  public:
  void clear_variant();
  ::paraview_protobuf::Variant* mutable_variant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >*
      mutable_variant();
  private:
  const ::paraview_protobuf::Variant& _internal_variant(int index) const;
  ::paraview_protobuf::Variant* _internal_add_variant();
  public:
  const ::paraview_protobuf::Variant& variant(int index) const;
  ::paraview_protobuf::Variant* add_variant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >&
      variant() const;

  // @@protoc_insertion_point(class_scope:paraview_protobuf.VariantList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant > variant_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT MessageCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.MessageCollection) */ {
 public:
  MessageCollection();
  virtual ~MessageCollection();

  MessageCollection(const MessageCollection& from);
  MessageCollection(MessageCollection&& from) noexcept
    : MessageCollection() {
    *this = ::std::move(from);
  }

  inline MessageCollection& operator=(const MessageCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageCollection& operator=(MessageCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageCollection* internal_default_instance() {
    return reinterpret_cast<const MessageCollection*>(
               &_MessageCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageCollection& a, MessageCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageCollection* New() const final {
    return CreateMaybeMessage<MessageCollection>(nullptr);
  }

  MessageCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageCollection& from);
  void MergeFrom(const MessageCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.MessageCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .paraview_protobuf.Message item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::paraview_protobuf::Message* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Message >*
      mutable_item();
  private:
  const ::paraview_protobuf::Message& _internal_item(int index) const;
  ::paraview_protobuf::Message* _internal_add_item();
  public:
  const ::paraview_protobuf::Message& item(int index) const;
  ::paraview_protobuf::Message* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Message >&
      item() const;

  // @@protoc_insertion_point(class_scope:paraview_protobuf.MessageCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Message > item_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalIdFieldNumber = 1,
    kLocationFieldNumber = 2,
    kShareOnlyFieldNumber = 3,
    kReqDefFieldNumber = 4,
    kClientIdFieldNumber = 5,
  };
  // required uint64 global_id = 1;
  bool has_global_id() const;
  private:
  bool _internal_has_global_id() const;
  public:
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id() const;
  void set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_global_id() const;
  void _internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool share_only = 3 [default = false];
  bool has_share_only() const;
  private:
  bool _internal_has_share_only() const;
  public:
  void clear_share_only();
  bool share_only() const;
  void set_share_only(bool value);
  private:
  bool _internal_share_only() const;
  void _internal_set_share_only(bool value);
  public:

  // optional bool req_def = 4 [default = false];
  bool has_req_def() const;
  private:
  bool _internal_has_req_def() const;
  public:
  void clear_req_def();
  bool req_def() const;
  void set_req_def(bool value);
  private:
  bool _internal_req_def() const;
  void _internal_set_req_def(bool value);
  public:

  // optional uint32 client_id = 5 [default = 0];
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Message)
  // @@protoc_insertion_point(class_scope:paraview_protobuf.Message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 location_;
  bool share_only_;
  bool req_def_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT DefinitionHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.DefinitionHeader) */ {
 public:
  DefinitionHeader();
  virtual ~DefinitionHeader();

  DefinitionHeader(const DefinitionHeader& from);
  DefinitionHeader(DefinitionHeader&& from) noexcept
    : DefinitionHeader() {
    *this = ::std::move(from);
  }

  inline DefinitionHeader& operator=(const DefinitionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefinitionHeader& operator=(DefinitionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefinitionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefinitionHeader* internal_default_instance() {
    return reinterpret_cast<const DefinitionHeader*>(
               &_DefinitionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DefinitionHeader& a, DefinitionHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(DefinitionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefinitionHeader* New() const final {
    return CreateMaybeMessage<DefinitionHeader>(nullptr);
  }

  DefinitionHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefinitionHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefinitionHeader& from);
  void MergeFrom(const DefinitionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefinitionHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.DefinitionHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kClientClassFieldNumber = 10;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    client_class;
  static const int kServerClassFieldNumber = 11;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    server_class;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.DefinitionHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyState_SubProxy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyState.SubProxy) */ {
 public:
  ProxyState_SubProxy();
  virtual ~ProxyState_SubProxy();

  ProxyState_SubProxy(const ProxyState_SubProxy& from);
  ProxyState_SubProxy(ProxyState_SubProxy&& from) noexcept
    : ProxyState_SubProxy() {
    *this = ::std::move(from);
  }

  inline ProxyState_SubProxy& operator=(const ProxyState_SubProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyState_SubProxy& operator=(ProxyState_SubProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyState_SubProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyState_SubProxy* internal_default_instance() {
    return reinterpret_cast<const ProxyState_SubProxy*>(
               &_ProxyState_SubProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProxyState_SubProxy& a, ProxyState_SubProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyState_SubProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyState_SubProxy* New() const final {
    return CreateMaybeMessage<ProxyState_SubProxy>(nullptr);
  }

  ProxyState_SubProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyState_SubProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyState_SubProxy& from);
  void MergeFrom(const ProxyState_SubProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyState_SubProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyState.SubProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGlobalIdFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 global_id = 2;
  bool has_global_id() const;
  private:
  bool _internal_has_global_id() const;
  public:
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_id() const;
  void set_global_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_id() const;
  void _internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyState.SubProxy)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_id_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyState_Annotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyState.Annotation) */ {
 public:
  ProxyState_Annotation();
  virtual ~ProxyState_Annotation();

  ProxyState_Annotation(const ProxyState_Annotation& from);
  ProxyState_Annotation(ProxyState_Annotation&& from) noexcept
    : ProxyState_Annotation() {
    *this = ::std::move(from);
  }

  inline ProxyState_Annotation& operator=(const ProxyState_Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyState_Annotation& operator=(ProxyState_Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyState_Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyState_Annotation* internal_default_instance() {
    return reinterpret_cast<const ProxyState_Annotation*>(
               &_ProxyState_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProxyState_Annotation& a, ProxyState_Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyState_Annotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyState_Annotation* New() const final {
    return CreateMaybeMessage<ProxyState_Annotation>(nullptr);
  }

  ProxyState_Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyState_Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyState_Annotation& from);
  void MergeFrom(const ProxyState_Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyState_Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyState.Annotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyState.Annotation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyState_UserData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyState.UserData) */ {
 public:
  ProxyState_UserData();
  virtual ~ProxyState_UserData();

  ProxyState_UserData(const ProxyState_UserData& from);
  ProxyState_UserData(ProxyState_UserData&& from) noexcept
    : ProxyState_UserData() {
    *this = ::std::move(from);
  }

  inline ProxyState_UserData& operator=(const ProxyState_UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyState_UserData& operator=(ProxyState_UserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyState_UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyState_UserData* internal_default_instance() {
    return reinterpret_cast<const ProxyState_UserData*>(
               &_ProxyState_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProxyState_UserData& a, ProxyState_UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyState_UserData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyState_UserData* New() const final {
    return CreateMaybeMessage<ProxyState_UserData>(nullptr);
  }

  ProxyState_UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyState_UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyState_UserData& from);
  void MergeFrom(const ProxyState_UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyState_UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyState.UserData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .paraview_protobuf.Variant variant = 2;
  int variant_size() const;
  private:
  int _internal_variant_size() const;
  public:
  void clear_variant();
  ::paraview_protobuf::Variant* mutable_variant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >*
      mutable_variant();
  private:
  const ::paraview_protobuf::Variant& _internal_variant(int index) const;
  ::paraview_protobuf::Variant* _internal_add_variant();
  public:
  const ::paraview_protobuf::Variant& variant(int index) const;
  ::paraview_protobuf::Variant* add_variant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >&
      variant() const;

  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyState.UserData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant > variant_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyState_Property :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyState.Property) */ {
 public:
  ProxyState_Property();
  virtual ~ProxyState_Property();

  ProxyState_Property(const ProxyState_Property& from);
  ProxyState_Property(ProxyState_Property&& from) noexcept
    : ProxyState_Property() {
    *this = ::std::move(from);
  }

  inline ProxyState_Property& operator=(const ProxyState_Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyState_Property& operator=(ProxyState_Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyState_Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyState_Property* internal_default_instance() {
    return reinterpret_cast<const ProxyState_Property*>(
               &_ProxyState_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProxyState_Property& a, ProxyState_Property& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyState_Property* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyState_Property* New() const final {
    return CreateMaybeMessage<ProxyState_Property>(nullptr);
  }

  ProxyState_Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyState_Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyState_Property& from);
  void MergeFrom(const ProxyState_Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyState_Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyState.Property";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated .paraview_protobuf.ProxyState.UserData user_data = 3;
  int user_data_size() const;
  private:
  int _internal_user_data_size() const;
  public:
  void clear_user_data();
  ::paraview_protobuf::ProxyState_UserData* mutable_user_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::ProxyState_UserData >*
      mutable_user_data();
  private:
  const ::paraview_protobuf::ProxyState_UserData& _internal_user_data(int index) const;
  ::paraview_protobuf::ProxyState_UserData* _internal_add_user_data();
  public:
  const ::paraview_protobuf::ProxyState_UserData& user_data(int index) const;
  ::paraview_protobuf::ProxyState_UserData* add_user_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::ProxyState_UserData >&
      user_data() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .paraview_protobuf.Variant value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::paraview_protobuf::Variant& value() const;
  ::paraview_protobuf::Variant* release_value();
  ::paraview_protobuf::Variant* mutable_value();
  void set_allocated_value(::paraview_protobuf::Variant* value);
  private:
  const ::paraview_protobuf::Variant& _internal_value() const;
  ::paraview_protobuf::Variant* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyState.Property)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::ProxyState_UserData > user_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::paraview_protobuf::Variant* value_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyState) */ {
 public:
  ProxyState();
  virtual ~ProxyState();

  ProxyState(const ProxyState& from);
  ProxyState(ProxyState&& from) noexcept
    : ProxyState() {
    *this = ::std::move(from);
  }

  inline ProxyState& operator=(const ProxyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyState& operator=(ProxyState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyState* internal_default_instance() {
    return reinterpret_cast<const ProxyState*>(
               &_ProxyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProxyState& a, ProxyState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyState* New() const final {
    return CreateMaybeMessage<ProxyState>(nullptr);
  }

  ProxyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyState& from);
  void MergeFrom(const ProxyState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProxyState_SubProxy SubProxy;
  typedef ProxyState_Annotation Annotation;
  typedef ProxyState_UserData UserData;
  typedef ProxyState_Property Property;

  // accessors -------------------------------------------------------

  static const int kXmlGroupFieldNumber = 20;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    xml_group;
  static const int kXmlNameFieldNumber = 21;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    xml_name;
  static const int kXmlSubProxyNameFieldNumber = 22;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    xml_sub_proxy_name;
  static const int kPropertyFieldNumber = 23;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyState_Property >, 11, false >
    property;
  static const int kSubproxyFieldNumber = 24;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyState_SubProxy >, 11, false >
    subproxy;
  static const int kAnnotationFieldNumber = 25;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyState_Annotation >, 11, false >
    annotation;
  static const int kHasAnnotationFieldNumber = 26;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    has_annotation;
  static const int kUserDataFieldNumber = 27;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyState_UserData >, 11, false >
    user_data;
  static const int kLogNameFieldNumber = 28;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    log_name;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT PXMRegistrationState_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.PXMRegistrationState.Entry) */ {
 public:
  PXMRegistrationState_Entry();
  virtual ~PXMRegistrationState_Entry();

  PXMRegistrationState_Entry(const PXMRegistrationState_Entry& from);
  PXMRegistrationState_Entry(PXMRegistrationState_Entry&& from) noexcept
    : PXMRegistrationState_Entry() {
    *this = ::std::move(from);
  }

  inline PXMRegistrationState_Entry& operator=(const PXMRegistrationState_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PXMRegistrationState_Entry& operator=(PXMRegistrationState_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PXMRegistrationState_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PXMRegistrationState_Entry* internal_default_instance() {
    return reinterpret_cast<const PXMRegistrationState_Entry*>(
               &_PXMRegistrationState_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PXMRegistrationState_Entry& a, PXMRegistrationState_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(PXMRegistrationState_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PXMRegistrationState_Entry* New() const final {
    return CreateMaybeMessage<PXMRegistrationState_Entry>(nullptr);
  }

  PXMRegistrationState_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PXMRegistrationState_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PXMRegistrationState_Entry& from);
  void MergeFrom(const PXMRegistrationState_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PXMRegistrationState_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.PXMRegistrationState.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kNameFieldNumber = 2,
    kGlobalIdFieldNumber = 3,
  };
  // optional string group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint64 global_id = 3;
  bool has_global_id() const;
  private:
  bool _internal_has_global_id() const;
  public:
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id() const;
  void set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_global_id() const;
  void _internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.PXMRegistrationState.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT PXMRegistrationState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.PXMRegistrationState) */ {
 public:
  PXMRegistrationState();
  virtual ~PXMRegistrationState();

  PXMRegistrationState(const PXMRegistrationState& from);
  PXMRegistrationState(PXMRegistrationState&& from) noexcept
    : PXMRegistrationState() {
    *this = ::std::move(from);
  }

  inline PXMRegistrationState& operator=(const PXMRegistrationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PXMRegistrationState& operator=(PXMRegistrationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PXMRegistrationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PXMRegistrationState* internal_default_instance() {
    return reinterpret_cast<const PXMRegistrationState*>(
               &_PXMRegistrationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PXMRegistrationState& a, PXMRegistrationState& b) {
    a.Swap(&b);
  }
  inline void Swap(PXMRegistrationState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PXMRegistrationState* New() const final {
    return CreateMaybeMessage<PXMRegistrationState>(nullptr);
  }

  PXMRegistrationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PXMRegistrationState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PXMRegistrationState& from);
  void MergeFrom(const PXMRegistrationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PXMRegistrationState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.PXMRegistrationState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PXMRegistrationState_Entry Entry;

  // accessors -------------------------------------------------------

  static const int kRegisteredProxyFieldNumber = 30;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::PXMRegistrationState_Entry >, 11, false >
    registered_proxy;
  static const int kRegisteredSelectionModelFieldNumber = 31;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::PXMRegistrationState_Entry >, 11, false >
    registered_selection_model;
  static const int kRegisteredLinkFieldNumber = 32;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::PXMRegistrationState_Entry >, 11, false >
    registered_link;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.PXMRegistrationState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyDefinitionState_ProxyXMLDefinition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition) */ {
 public:
  ProxyDefinitionState_ProxyXMLDefinition();
  virtual ~ProxyDefinitionState_ProxyXMLDefinition();

  ProxyDefinitionState_ProxyXMLDefinition(const ProxyDefinitionState_ProxyXMLDefinition& from);
  ProxyDefinitionState_ProxyXMLDefinition(ProxyDefinitionState_ProxyXMLDefinition&& from) noexcept
    : ProxyDefinitionState_ProxyXMLDefinition() {
    *this = ::std::move(from);
  }

  inline ProxyDefinitionState_ProxyXMLDefinition& operator=(const ProxyDefinitionState_ProxyXMLDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyDefinitionState_ProxyXMLDefinition& operator=(ProxyDefinitionState_ProxyXMLDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyDefinitionState_ProxyXMLDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyDefinitionState_ProxyXMLDefinition* internal_default_instance() {
    return reinterpret_cast<const ProxyDefinitionState_ProxyXMLDefinition*>(
               &_ProxyDefinitionState_ProxyXMLDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProxyDefinitionState_ProxyXMLDefinition& a, ProxyDefinitionState_ProxyXMLDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyDefinitionState_ProxyXMLDefinition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyDefinitionState_ProxyXMLDefinition* New() const final {
    return CreateMaybeMessage<ProxyDefinitionState_ProxyXMLDefinition>(nullptr);
  }

  ProxyDefinitionState_ProxyXMLDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyDefinitionState_ProxyXMLDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyDefinitionState_ProxyXMLDefinition& from);
  void MergeFrom(const ProxyDefinitionState_ProxyXMLDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyDefinitionState_ProxyXMLDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kNameFieldNumber = 2,
    kXmlFieldNumber = 3,
  };
  // required string group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string xml = 3;
  bool has_xml() const;
  private:
  bool _internal_has_xml() const;
  public:
  void clear_xml();
  const std::string& xml() const;
  void set_xml(const std::string& value);
  void set_xml(std::string&& value);
  void set_xml(const char* value);
  void set_xml(const char* value, size_t size);
  std::string* mutable_xml();
  std::string* release_xml();
  void set_allocated_xml(std::string* xml);
  private:
  const std::string& _internal_xml() const;
  void _internal_set_xml(const std::string& value);
  std::string* _internal_mutable_xml();
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xml_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxyDefinitionState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxyDefinitionState) */ {
 public:
  ProxyDefinitionState();
  virtual ~ProxyDefinitionState();

  ProxyDefinitionState(const ProxyDefinitionState& from);
  ProxyDefinitionState(ProxyDefinitionState&& from) noexcept
    : ProxyDefinitionState() {
    *this = ::std::move(from);
  }

  inline ProxyDefinitionState& operator=(const ProxyDefinitionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyDefinitionState& operator=(ProxyDefinitionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyDefinitionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyDefinitionState* internal_default_instance() {
    return reinterpret_cast<const ProxyDefinitionState*>(
               &_ProxyDefinitionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProxyDefinitionState& a, ProxyDefinitionState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyDefinitionState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyDefinitionState* New() const final {
    return CreateMaybeMessage<ProxyDefinitionState>(nullptr);
  }

  ProxyDefinitionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyDefinitionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyDefinitionState& from);
  void MergeFrom(const ProxyDefinitionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyDefinitionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxyDefinitionState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProxyDefinitionState_ProxyXMLDefinition ProxyXMLDefinition;

  // accessors -------------------------------------------------------

  static const int kXmlDefinitionProxyFieldNumber = 35;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyDefinitionState_ProxyXMLDefinition >, 11, false >
    xml_definition_proxy;
  static const int kXmlCustomDefinitionProxyFieldNumber = 36;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ProxyDefinitionState_ProxyXMLDefinition >, 11, false >
    xml_custom_definition_proxy;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxyDefinitionState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT PullRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.PullRequest) */ {
 public:
  PullRequest();
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const final {
    return CreateMaybeMessage<PullRequest>(nullptr);
  }

  PullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.PullRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kArgumentsFieldNumber = 40;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::Variant >, 11, false >
    arguments;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.PullRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ProxySelectionModelState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ProxySelectionModelState) */ {
 public:
  ProxySelectionModelState();
  virtual ~ProxySelectionModelState();

  ProxySelectionModelState(const ProxySelectionModelState& from);
  ProxySelectionModelState(ProxySelectionModelState&& from) noexcept
    : ProxySelectionModelState() {
    *this = ::std::move(from);
  }

  inline ProxySelectionModelState& operator=(const ProxySelectionModelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxySelectionModelState& operator=(ProxySelectionModelState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxySelectionModelState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxySelectionModelState* internal_default_instance() {
    return reinterpret_cast<const ProxySelectionModelState*>(
               &_ProxySelectionModelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProxySelectionModelState& a, ProxySelectionModelState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxySelectionModelState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxySelectionModelState* New() const final {
    return CreateMaybeMessage<ProxySelectionModelState>(nullptr);
  }

  ProxySelectionModelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxySelectionModelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxySelectionModelState& from);
  void MergeFrom(const ProxySelectionModelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxySelectionModelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ProxySelectionModelState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kCurrentProxyFieldNumber = 52;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
    current_proxy;
  static const int kCurrentPortFieldNumber = 53;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
    current_port;
  static const int kProxyFieldNumber = 50;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
    proxy;
  static const int kPortFieldNumber = 51;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
    port;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ProxySelectionModelState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT LinkState_LinkDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.LinkState.LinkDescription) */ {
 public:
  LinkState_LinkDescription();
  virtual ~LinkState_LinkDescription();

  LinkState_LinkDescription(const LinkState_LinkDescription& from);
  LinkState_LinkDescription(LinkState_LinkDescription&& from) noexcept
    : LinkState_LinkDescription() {
    *this = ::std::move(from);
  }

  inline LinkState_LinkDescription& operator=(const LinkState_LinkDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkState_LinkDescription& operator=(LinkState_LinkDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkState_LinkDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkState_LinkDescription* internal_default_instance() {
    return reinterpret_cast<const LinkState_LinkDescription*>(
               &_LinkState_LinkDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LinkState_LinkDescription& a, LinkState_LinkDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkState_LinkDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkState_LinkDescription* New() const final {
    return CreateMaybeMessage<LinkState_LinkDescription>(nullptr);
  }

  LinkState_LinkDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkState_LinkDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkState_LinkDescription& from);
  void MergeFrom(const LinkState_LinkDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkState_LinkDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.LinkState.LinkDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LinkState_LinkDescription_Direction Direction;
  static constexpr Direction NONE =
    LinkState_LinkDescription_Direction_NONE;
  static constexpr Direction INPUT =
    LinkState_LinkDescription_Direction_INPUT;
  static constexpr Direction OUTPUT =
    LinkState_LinkDescription_Direction_OUTPUT;
  static inline bool Direction_IsValid(int value) {
    return LinkState_LinkDescription_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    LinkState_LinkDescription_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    LinkState_LinkDescription_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    LinkState_LinkDescription_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return LinkState_LinkDescription_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return LinkState_LinkDescription_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return LinkState_LinkDescription_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 2,
    kProxyFieldNumber = 1,
    kDirectionFieldNumber = 3,
  };
  // optional string property_name = 2;
  bool has_property_name() const;
  private:
  bool _internal_has_property_name() const;
  public:
  void clear_property_name();
  const std::string& property_name() const;
  void set_property_name(const std::string& value);
  void set_property_name(std::string&& value);
  void set_property_name(const char* value);
  void set_property_name(const char* value, size_t size);
  std::string* mutable_property_name();
  std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // required uint32 proxy = 1;
  bool has_proxy() const;
  private:
  bool _internal_has_proxy() const;
  public:
  void clear_proxy();
  ::PROTOBUF_NAMESPACE_ID::uint32 proxy() const;
  void set_proxy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proxy() const;
  void _internal_set_proxy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .paraview_protobuf.LinkState.LinkDescription.Direction direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::paraview_protobuf::LinkState_LinkDescription_Direction direction() const;
  void set_direction(::paraview_protobuf::LinkState_LinkDescription_Direction value);
  private:
  ::paraview_protobuf::LinkState_LinkDescription_Direction _internal_direction() const;
  void _internal_set_direction(::paraview_protobuf::LinkState_LinkDescription_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.LinkState.LinkDescription)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proxy_;
  int direction_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT LinkState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.LinkState) */ {
 public:
  LinkState();
  virtual ~LinkState();

  LinkState(const LinkState& from);
  LinkState(LinkState&& from) noexcept
    : LinkState() {
    *this = ::std::move(from);
  }

  inline LinkState& operator=(const LinkState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkState& operator=(LinkState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkState* internal_default_instance() {
    return reinterpret_cast<const LinkState*>(
               &_LinkState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LinkState& a, LinkState& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkState* New() const final {
    return CreateMaybeMessage<LinkState>(nullptr);
  }

  LinkState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkState& from);
  void MergeFrom(const LinkState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.LinkState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LinkState_LinkDescription LinkDescription;

  // accessors -------------------------------------------------------

  static const int kPropagateUpdateFieldNumber = 60;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    propagate_update;
  static const int kEnabledFieldNumber = 61;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    enabled;
  static const int kSyncInteractiveRendersFieldNumber = 62;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    sync_interactive_renders;
  static const int kLinkFieldNumber = 63;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::LinkState_LinkDescription >, 11, false >
    link;
  static const int kExceptionPropertyFieldNumber = 64;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
    exception_property;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.LinkState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT MousePointer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.MousePointer) */ {
 public:
  MousePointer();
  virtual ~MousePointer();

  MousePointer(const MousePointer& from);
  MousePointer(MousePointer&& from) noexcept
    : MousePointer() {
    *this = ::std::move(from);
  }

  inline MousePointer& operator=(const MousePointer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MousePointer& operator=(MousePointer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MousePointer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MousePointer* internal_default_instance() {
    return reinterpret_cast<const MousePointer*>(
               &_MousePointer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MousePointer& a, MousePointer& b) {
    a.Swap(&b);
  }
  inline void Swap(MousePointer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MousePointer* New() const final {
    return CreateMaybeMessage<MousePointer>(nullptr);
  }

  MousePointer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MousePointer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MousePointer& from);
  void MergeFrom(const MousePointer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MousePointer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.MousePointer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MousePointer_Ratio Ratio;
  static constexpr Ratio BOTH =
    MousePointer_Ratio_BOTH;
  static constexpr Ratio HEIGHT =
    MousePointer_Ratio_HEIGHT;
  static constexpr Ratio WIDTH =
    MousePointer_Ratio_WIDTH;
  static inline bool Ratio_IsValid(int value) {
    return MousePointer_Ratio_IsValid(value);
  }
  static constexpr Ratio Ratio_MIN =
    MousePointer_Ratio_Ratio_MIN;
  static constexpr Ratio Ratio_MAX =
    MousePointer_Ratio_Ratio_MAX;
  static constexpr int Ratio_ARRAYSIZE =
    MousePointer_Ratio_Ratio_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Ratio_descriptor() {
    return MousePointer_Ratio_descriptor();
  }
  template<typename T>
  static inline const std::string& Ratio_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ratio>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ratio_Name.");
    return MousePointer_Ratio_Name(enum_t_value);
  }
  static inline bool Ratio_Parse(const std::string& name,
      Ratio* value) {
    return MousePointer_Ratio_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  static const int kViewFieldNumber = 70;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
    view;
  static const int kXFieldNumber = 71;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
    x;
  static const int kYFieldNumber = 72;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
    y;
  static const int kForceShowFieldNumber = 73;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    forceShow;
  static const int kRatioTypeFieldNumber = 74;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::paraview_protobuf::MousePointer_Ratio, ::paraview_protobuf::MousePointer_Ratio_IsValid>, 14, false >
    ratioType;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.MousePointer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ChartViewBounds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ChartViewBounds) */ {
 public:
  ChartViewBounds();
  virtual ~ChartViewBounds();

  ChartViewBounds(const ChartViewBounds& from);
  ChartViewBounds(ChartViewBounds&& from) noexcept
    : ChartViewBounds() {
    *this = ::std::move(from);
  }

  inline ChartViewBounds& operator=(const ChartViewBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartViewBounds& operator=(ChartViewBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChartViewBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartViewBounds* internal_default_instance() {
    return reinterpret_cast<const ChartViewBounds*>(
               &_ChartViewBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChartViewBounds& a, ChartViewBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartViewBounds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartViewBounds* New() const final {
    return CreateMaybeMessage<ChartViewBounds>(nullptr);
  }

  ChartViewBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartViewBounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartViewBounds& from);
  void MergeFrom(const ChartViewBounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartViewBounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ChartViewBounds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kViewFieldNumber = 75;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
    view;
  static const int kRangeFieldNumber = 76;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
    range;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ChartViewBounds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ClientsInformation_ClientInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ClientsInformation.ClientInfo) */ {
 public:
  ClientsInformation_ClientInfo();
  virtual ~ClientsInformation_ClientInfo();

  ClientsInformation_ClientInfo(const ClientsInformation_ClientInfo& from);
  ClientsInformation_ClientInfo(ClientsInformation_ClientInfo&& from) noexcept
    : ClientsInformation_ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientsInformation_ClientInfo& operator=(const ClientsInformation_ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientsInformation_ClientInfo& operator=(ClientsInformation_ClientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientsInformation_ClientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientsInformation_ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientsInformation_ClientInfo*>(
               &_ClientsInformation_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ClientsInformation_ClientInfo& a, ClientsInformation_ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientsInformation_ClientInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientsInformation_ClientInfo* New() const final {
    return CreateMaybeMessage<ClientsInformation_ClientInfo>(nullptr);
  }

  ClientsInformation_ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientsInformation_ClientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientsInformation_ClientInfo& from);
  void MergeFrom(const ClientsInformation_ClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientsInformation_ClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ClientsInformation.ClientInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUserFieldNumber = 1,
    kIsMasterFieldNumber = 3,
    kFollowCamFieldNumber = 4,
    kDisableFurtherConnectionsFieldNumber = 5,
    kConnectIdFieldNumber = 6,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::uint32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user() const;
  void _internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_master = 3 [default = false];
  bool has_is_master() const;
  private:
  bool _internal_has_is_master() const;
  public:
  void clear_is_master();
  bool is_master() const;
  void set_is_master(bool value);
  private:
  bool _internal_is_master() const;
  void _internal_set_is_master(bool value);
  public:

  // optional bool follow_cam = 4 [default = false];
  bool has_follow_cam() const;
  private:
  bool _internal_has_follow_cam() const;
  public:
  void clear_follow_cam();
  bool follow_cam() const;
  void set_follow_cam(bool value);
  private:
  bool _internal_follow_cam() const;
  void _internal_set_follow_cam(bool value);
  public:

  // optional bool disable_further_connections = 5 [default = false];
  bool has_disable_further_connections() const;
  private:
  bool _internal_has_disable_further_connections() const;
  public:
  void clear_disable_further_connections();
  bool disable_further_connections() const;
  void set_disable_further_connections(bool value);
  private:
  bool _internal_disable_further_connections() const;
  void _internal_set_disable_further_connections(bool value);
  public:

  // optional uint32 connect_id = 6 [default = 0];
  bool has_connect_id() const;
  private:
  bool _internal_has_connect_id() const;
  public:
  void clear_connect_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 connect_id() const;
  void set_connect_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connect_id() const;
  void _internal_set_connect_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:paraview_protobuf.ClientsInformation.ClientInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_;
  bool is_master_;
  bool follow_cam_;
  bool disable_further_connections_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connect_id_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ClientsInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ClientsInformation) */ {
 public:
  ClientsInformation();
  virtual ~ClientsInformation();

  ClientsInformation(const ClientsInformation& from);
  ClientsInformation(ClientsInformation&& from) noexcept
    : ClientsInformation() {
    *this = ::std::move(from);
  }

  inline ClientsInformation& operator=(const ClientsInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientsInformation& operator=(ClientsInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientsInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientsInformation* internal_default_instance() {
    return reinterpret_cast<const ClientsInformation*>(
               &_ClientsInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ClientsInformation& a, ClientsInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientsInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientsInformation* New() const final {
    return CreateMaybeMessage<ClientsInformation>(nullptr);
  }

  ClientsInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientsInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientsInformation& from);
  void MergeFrom(const ClientsInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientsInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ClientsInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientsInformation_ClientInfo ClientInfo;

  // accessors -------------------------------------------------------

  static const int kUserFieldNumber = 80;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::paraview_protobuf::ClientsInformation_ClientInfo >, 11, false >
    user;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ClientsInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT ChatMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.ChatMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kAuthorFieldNumber = 84;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
    author;
  static const int kTxtFieldNumber = 85;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    txt;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.ChatMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// -------------------------------------------------------------------

class VTKREMOTINGSERVERMANAGER_EXPORT QtEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paraview_protobuf.QtEvent) */ {
 public:
  QtEvent();
  virtual ~QtEvent();

  QtEvent(const QtEvent& from);
  QtEvent(QtEvent&& from) noexcept
    : QtEvent() {
    *this = ::std::move(from);
  }

  inline QtEvent& operator=(const QtEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline QtEvent& operator=(QtEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QtEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QtEvent* internal_default_instance() {
    return reinterpret_cast<const QtEvent*>(
               &_QtEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QtEvent& a, QtEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(QtEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QtEvent* New() const final {
    return CreateMaybeMessage<QtEvent>(nullptr);
  }

  QtEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QtEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QtEvent& from);
  void MergeFrom(const QtEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QtEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paraview_protobuf.QtEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtkPVMessage_2eproto);
    return ::descriptor_table_vtkPVMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QtEvent_QtEventType QtEventType;
  static constexpr QtEventType CHAT =
    QtEvent_QtEventType_CHAT;
  static constexpr QtEventType OTHER =
    QtEvent_QtEventType_OTHER;
  static inline bool QtEventType_IsValid(int value) {
    return QtEvent_QtEventType_IsValid(value);
  }
  static constexpr QtEventType QtEventType_MIN =
    QtEvent_QtEventType_QtEventType_MIN;
  static constexpr QtEventType QtEventType_MAX =
    QtEvent_QtEventType_QtEventType_MAX;
  static constexpr int QtEventType_ARRAYSIZE =
    QtEvent_QtEventType_QtEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  QtEventType_descriptor() {
    return QtEvent_QtEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& QtEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QtEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QtEventType_Name.");
    return QtEvent_QtEventType_Name(enum_t_value);
  }
  static inline bool QtEventType_Parse(const std::string& name,
      QtEventType* value) {
    return QtEvent_QtEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  static const int kTypeFieldNumber = 98;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::paraview_protobuf::Message,
      ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::paraview_protobuf::QtEvent_QtEventType, ::paraview_protobuf::QtEvent_QtEventType_IsValid>, 14, false >
    type;
  // @@protoc_insertion_point(class_scope:paraview_protobuf.QtEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtkPVMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variant

// required .paraview_protobuf.Variant.Type type = 1;
inline bool Variant::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Variant::has_type() const {
  return _internal_has_type();
}
inline void Variant::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::paraview_protobuf::Variant_Type Variant::_internal_type() const {
  return static_cast< ::paraview_protobuf::Variant_Type >(type_);
}
inline ::paraview_protobuf::Variant_Type Variant::type() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.type)
  return _internal_type();
}
inline void Variant::_internal_set_type(::paraview_protobuf::Variant_Type value) {
  assert(::paraview_protobuf::Variant_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Variant::set_type(::paraview_protobuf::Variant_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.type)
}

// repeated sint64 idtype = 3;
inline int Variant::_internal_idtype_size() const {
  return idtype_.size();
}
inline int Variant::idtype_size() const {
  return _internal_idtype_size();
}
inline void Variant::clear_idtype() {
  idtype_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::_internal_idtype(int index) const {
  return idtype_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::idtype(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.idtype)
  return _internal_idtype(index);
}
inline void Variant::set_idtype(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  idtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.idtype)
}
inline void Variant::_internal_add_idtype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  idtype_.Add(value);
}
inline void Variant::add_idtype(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_idtype(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.idtype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Variant::_internal_idtype() const {
  return idtype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Variant::idtype() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.idtype)
  return _internal_idtype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Variant::_internal_mutable_idtype() {
  return &idtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Variant::mutable_idtype() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.idtype)
  return _internal_mutable_idtype();
}

// repeated sint32 integer = 4;
inline int Variant::_internal_integer_size() const {
  return integer_.size();
}
inline int Variant::integer_size() const {
  return _internal_integer_size();
}
inline void Variant::clear_integer() {
  integer_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variant::_internal_integer(int index) const {
  return integer_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variant::integer(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.integer)
  return _internal_integer(index);
}
inline void Variant::set_integer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  integer_.Set(index, value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.integer)
}
inline void Variant::_internal_add_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  integer_.Add(value);
}
inline void Variant::add_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_integer(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.integer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Variant::_internal_integer() const {
  return integer_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Variant::integer() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.integer)
  return _internal_integer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Variant::_internal_mutable_integer() {
  return &integer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Variant::mutable_integer() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.integer)
  return _internal_mutable_integer();
}

// repeated double float64 = 5;
inline int Variant::_internal_float64_size() const {
  return float64_.size();
}
inline int Variant::float64_size() const {
  return _internal_float64_size();
}
inline void Variant::clear_float64() {
  float64_.Clear();
}
inline double Variant::_internal_float64(int index) const {
  return float64_.Get(index);
}
inline double Variant::float64(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.float64)
  return _internal_float64(index);
}
inline void Variant::set_float64(int index, double value) {
  float64_.Set(index, value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.float64)
}
inline void Variant::_internal_add_float64(double value) {
  float64_.Add(value);
}
inline void Variant::add_float64(double value) {
  _internal_add_float64(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.float64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variant::_internal_float64() const {
  return float64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variant::float64() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.float64)
  return _internal_float64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variant::_internal_mutable_float64() {
  return &float64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variant::mutable_float64() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.float64)
  return _internal_mutable_float64();
}

// repeated uint64 proxy_global_id = 6;
inline int Variant::_internal_proxy_global_id_size() const {
  return proxy_global_id_.size();
}
inline int Variant::proxy_global_id_size() const {
  return _internal_proxy_global_id_size();
}
inline void Variant::clear_proxy_global_id() {
  proxy_global_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::_internal_proxy_global_id(int index) const {
  return proxy_global_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::proxy_global_id(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.proxy_global_id)
  return _internal_proxy_global_id(index);
}
inline void Variant::set_proxy_global_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  proxy_global_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.proxy_global_id)
}
inline void Variant::_internal_add_proxy_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  proxy_global_id_.Add(value);
}
inline void Variant::add_proxy_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_proxy_global_id(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.proxy_global_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Variant::_internal_proxy_global_id() const {
  return proxy_global_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Variant::proxy_global_id() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.proxy_global_id)
  return _internal_proxy_global_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Variant::_internal_mutable_proxy_global_id() {
  return &proxy_global_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Variant::mutable_proxy_global_id() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.proxy_global_id)
  return _internal_mutable_proxy_global_id();
}

// repeated int32 port_number = 7;
inline int Variant::_internal_port_number_size() const {
  return port_number_.size();
}
inline int Variant::port_number_size() const {
  return _internal_port_number_size();
}
inline void Variant::clear_port_number() {
  port_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variant::_internal_port_number(int index) const {
  return port_number_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variant::port_number(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.port_number)
  return _internal_port_number(index);
}
inline void Variant::set_port_number(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.port_number)
}
inline void Variant::_internal_add_port_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_number_.Add(value);
}
inline void Variant::add_port_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_port_number(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.port_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Variant::_internal_port_number() const {
  return port_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Variant::port_number() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.port_number)
  return _internal_port_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Variant::_internal_mutable_port_number() {
  return &port_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Variant::mutable_port_number() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.port_number)
  return _internal_mutable_port_number();
}

// repeated string txt = 8;
inline int Variant::_internal_txt_size() const {
  return txt_.size();
}
inline int Variant::txt_size() const {
  return _internal_txt_size();
}
inline void Variant::clear_txt() {
  txt_.Clear();
}
inline std::string* Variant::add_txt() {
  // @@protoc_insertion_point(field_add_mutable:paraview_protobuf.Variant.txt)
  return _internal_add_txt();
}
inline const std::string& Variant::_internal_txt(int index) const {
  return txt_.Get(index);
}
inline const std::string& Variant::txt(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.txt)
  return _internal_txt(index);
}
inline std::string* Variant::mutable_txt(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.Variant.txt)
  return txt_.Mutable(index);
}
inline void Variant::set_txt(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.txt)
  txt_.Mutable(index)->assign(value);
}
inline void Variant::set_txt(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.txt)
  txt_.Mutable(index)->assign(std::move(value));
}
inline void Variant::set_txt(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.Variant.txt)
}
inline void Variant::set_txt(int index, const char* value, size_t size) {
  txt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.Variant.txt)
}
inline std::string* Variant::_internal_add_txt() {
  return txt_.Add();
}
inline void Variant::add_txt(const std::string& value) {
  txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.txt)
}
inline void Variant::add_txt(std::string&& value) {
  txt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.txt)
}
inline void Variant::add_txt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paraview_protobuf.Variant.txt)
}
inline void Variant::add_txt(const char* value, size_t size) {
  txt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paraview_protobuf.Variant.txt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variant::txt() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.txt)
  return txt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variant::mutable_txt() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.txt)
  return &txt_;
}

// repeated bytes binary = 9;
inline int Variant::_internal_binary_size() const {
  return binary_.size();
}
inline int Variant::binary_size() const {
  return _internal_binary_size();
}
inline void Variant::clear_binary() {
  binary_.Clear();
}
inline std::string* Variant::add_binary() {
  // @@protoc_insertion_point(field_add_mutable:paraview_protobuf.Variant.binary)
  return _internal_add_binary();
}
inline const std::string& Variant::_internal_binary(int index) const {
  return binary_.Get(index);
}
inline const std::string& Variant::binary(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Variant.binary)
  return _internal_binary(index);
}
inline std::string* Variant::mutable_binary(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.Variant.binary)
  return binary_.Mutable(index);
}
inline void Variant::set_binary(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.binary)
  binary_.Mutable(index)->assign(value);
}
inline void Variant::set_binary(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:paraview_protobuf.Variant.binary)
  binary_.Mutable(index)->assign(std::move(value));
}
inline void Variant::set_binary(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  binary_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.Variant.binary)
}
inline void Variant::set_binary(int index, const void* value, size_t size) {
  binary_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.Variant.binary)
}
inline std::string* Variant::_internal_add_binary() {
  return binary_.Add();
}
inline void Variant::add_binary(const std::string& value) {
  binary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.binary)
}
inline void Variant::add_binary(std::string&& value) {
  binary_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:paraview_protobuf.Variant.binary)
}
inline void Variant::add_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  binary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paraview_protobuf.Variant.binary)
}
inline void Variant::add_binary(const void* value, size_t size) {
  binary_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paraview_protobuf.Variant.binary)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variant::binary() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.Variant.binary)
  return binary_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variant::mutable_binary() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.Variant.binary)
  return &binary_;
}

// -------------------------------------------------------------------

// VariantList

// repeated .paraview_protobuf.Variant variant = 1;
inline int VariantList::_internal_variant_size() const {
  return variant_.size();
}
inline int VariantList::variant_size() const {
  return _internal_variant_size();
}
inline void VariantList::clear_variant() {
  variant_.Clear();
}
inline ::paraview_protobuf::Variant* VariantList::mutable_variant(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.VariantList.variant)
  return variant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >*
VariantList::mutable_variant() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.VariantList.variant)
  return &variant_;
}
inline const ::paraview_protobuf::Variant& VariantList::_internal_variant(int index) const {
  return variant_.Get(index);
}
inline const ::paraview_protobuf::Variant& VariantList::variant(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.VariantList.variant)
  return _internal_variant(index);
}
inline ::paraview_protobuf::Variant* VariantList::_internal_add_variant() {
  return variant_.Add();
}
inline ::paraview_protobuf::Variant* VariantList::add_variant() {
  // @@protoc_insertion_point(field_add:paraview_protobuf.VariantList.variant)
  return _internal_add_variant();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >&
VariantList::variant() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.VariantList.variant)
  return variant_;
}

// -------------------------------------------------------------------

// MessageCollection

// repeated .paraview_protobuf.Message item = 1;
inline int MessageCollection::_internal_item_size() const {
  return item_.size();
}
inline int MessageCollection::item_size() const {
  return _internal_item_size();
}
inline void MessageCollection::clear_item() {
  item_.Clear();
}
inline ::paraview_protobuf::Message* MessageCollection::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.MessageCollection.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Message >*
MessageCollection::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.MessageCollection.item)
  return &item_;
}
inline const ::paraview_protobuf::Message& MessageCollection::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::paraview_protobuf::Message& MessageCollection::item(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.MessageCollection.item)
  return _internal_item(index);
}
inline ::paraview_protobuf::Message* MessageCollection::_internal_add_item() {
  return item_.Add();
}
inline ::paraview_protobuf::Message* MessageCollection::add_item() {
  // @@protoc_insertion_point(field_add:paraview_protobuf.MessageCollection.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Message >&
MessageCollection::item() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.MessageCollection.item)
  return item_;
}

// -------------------------------------------------------------------

// Message

// required uint64 global_id = 1;
inline bool Message::_internal_has_global_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_global_id() const {
  return _internal_has_global_id();
}
inline void Message::clear_global_id() {
  global_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_global_id() const {
  return global_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::global_id() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Message.global_id)
  return _internal_global_id();
}
inline void Message::_internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  global_id_ = value;
}
inline void Message::set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_global_id(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Message.global_id)
}

// required uint32 location = 2;
inline bool Message::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_location() const {
  return _internal_has_location();
}
inline void Message::clear_location() {
  location_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::location() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Message.location)
  return _internal_location();
}
inline void Message::_internal_set_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  location_ = value;
}
inline void Message::set_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Message.location)
}

// optional bool share_only = 3 [default = false];
inline bool Message::_internal_has_share_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_share_only() const {
  return _internal_has_share_only();
}
inline void Message::clear_share_only() {
  share_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Message::_internal_share_only() const {
  return share_only_;
}
inline bool Message::share_only() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Message.share_only)
  return _internal_share_only();
}
inline void Message::_internal_set_share_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  share_only_ = value;
}
inline void Message::set_share_only(bool value) {
  _internal_set_share_only(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Message.share_only)
}

// optional bool req_def = 4 [default = false];
inline bool Message::_internal_has_req_def() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Message::has_req_def() const {
  return _internal_has_req_def();
}
inline void Message::clear_req_def() {
  req_def_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Message::_internal_req_def() const {
  return req_def_;
}
inline bool Message::req_def() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Message.req_def)
  return _internal_req_def();
}
inline void Message::_internal_set_req_def(bool value) {
  _has_bits_[0] |= 0x00000008u;
  req_def_ = value;
}
inline void Message::set_req_def(bool value) {
  _internal_set_req_def(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Message.req_def)
}

// optional uint32 client_id = 5 [default = 0];
inline bool Message::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Message::has_client_id() const {
  return _internal_has_client_id();
}
inline void Message::clear_client_id() {
  client_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::client_id() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.Message.client_id)
  return _internal_client_id();
}
inline void Message::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_id_ = value;
}
inline void Message::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.Message.client_id)
}

// -------------------------------------------------------------------

// DefinitionHeader

// -------------------------------------------------------------------

// ProxyState_SubProxy

// required string name = 1;
inline bool ProxyState_SubProxy::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyState_SubProxy::has_name() const {
  return _internal_has_name();
}
inline void ProxyState_SubProxy::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyState_SubProxy::name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.SubProxy.name)
  return _internal_name();
}
inline void ProxyState_SubProxy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.SubProxy.name)
}
inline std::string* ProxyState_SubProxy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.SubProxy.name)
  return _internal_mutable_name();
}
inline const std::string& ProxyState_SubProxy::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProxyState_SubProxy::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyState_SubProxy::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyState.SubProxy.name)
}
inline void ProxyState_SubProxy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyState.SubProxy.name)
}
inline void ProxyState_SubProxy::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyState.SubProxy.name)
}
inline std::string* ProxyState_SubProxy::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyState_SubProxy::release_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.SubProxy.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyState_SubProxy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.SubProxy.name)
}

// required uint32 global_id = 2;
inline bool ProxyState_SubProxy::_internal_has_global_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyState_SubProxy::has_global_id() const {
  return _internal_has_global_id();
}
inline void ProxyState_SubProxy::clear_global_id() {
  global_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProxyState_SubProxy::_internal_global_id() const {
  return global_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProxyState_SubProxy::global_id() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.SubProxy.global_id)
  return _internal_global_id();
}
inline void ProxyState_SubProxy::_internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  global_id_ = value;
}
inline void ProxyState_SubProxy::set_global_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_id(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.SubProxy.global_id)
}

// -------------------------------------------------------------------

// ProxyState_Annotation

// required string key = 1;
inline bool ProxyState_Annotation::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyState_Annotation::has_key() const {
  return _internal_has_key();
}
inline void ProxyState_Annotation::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyState_Annotation::key() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.Annotation.key)
  return _internal_key();
}
inline void ProxyState_Annotation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.Annotation.key)
}
inline std::string* ProxyState_Annotation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.Annotation.key)
  return _internal_mutable_key();
}
inline const std::string& ProxyState_Annotation::_internal_key() const {
  return key_.GetNoArena();
}
inline void ProxyState_Annotation::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyState_Annotation::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyState.Annotation.key)
}
inline void ProxyState_Annotation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyState.Annotation.key)
}
inline void ProxyState_Annotation::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyState.Annotation.key)
}
inline std::string* ProxyState_Annotation::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyState_Annotation::release_key() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.Annotation.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyState_Annotation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.Annotation.key)
}

// required string value = 2;
inline bool ProxyState_Annotation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyState_Annotation::has_value() const {
  return _internal_has_value();
}
inline void ProxyState_Annotation::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProxyState_Annotation::value() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.Annotation.value)
  return _internal_value();
}
inline void ProxyState_Annotation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.Annotation.value)
}
inline std::string* ProxyState_Annotation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.Annotation.value)
  return _internal_mutable_value();
}
inline const std::string& ProxyState_Annotation::_internal_value() const {
  return value_.GetNoArena();
}
inline void ProxyState_Annotation::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyState_Annotation::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyState.Annotation.value)
}
inline void ProxyState_Annotation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyState.Annotation.value)
}
inline void ProxyState_Annotation::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyState.Annotation.value)
}
inline std::string* ProxyState_Annotation::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyState_Annotation::release_value() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.Annotation.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyState_Annotation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.Annotation.value)
}

// -------------------------------------------------------------------

// ProxyState_UserData

// required string key = 1;
inline bool ProxyState_UserData::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyState_UserData::has_key() const {
  return _internal_has_key();
}
inline void ProxyState_UserData::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyState_UserData::key() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.UserData.key)
  return _internal_key();
}
inline void ProxyState_UserData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.UserData.key)
}
inline std::string* ProxyState_UserData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.UserData.key)
  return _internal_mutable_key();
}
inline const std::string& ProxyState_UserData::_internal_key() const {
  return key_.GetNoArena();
}
inline void ProxyState_UserData::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyState_UserData::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyState.UserData.key)
}
inline void ProxyState_UserData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyState.UserData.key)
}
inline void ProxyState_UserData::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyState.UserData.key)
}
inline std::string* ProxyState_UserData::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyState_UserData::release_key() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.UserData.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyState_UserData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.UserData.key)
}

// repeated .paraview_protobuf.Variant variant = 2;
inline int ProxyState_UserData::_internal_variant_size() const {
  return variant_.size();
}
inline int ProxyState_UserData::variant_size() const {
  return _internal_variant_size();
}
inline void ProxyState_UserData::clear_variant() {
  variant_.Clear();
}
inline ::paraview_protobuf::Variant* ProxyState_UserData::mutable_variant(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.UserData.variant)
  return variant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >*
ProxyState_UserData::mutable_variant() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.ProxyState.UserData.variant)
  return &variant_;
}
inline const ::paraview_protobuf::Variant& ProxyState_UserData::_internal_variant(int index) const {
  return variant_.Get(index);
}
inline const ::paraview_protobuf::Variant& ProxyState_UserData::variant(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.UserData.variant)
  return _internal_variant(index);
}
inline ::paraview_protobuf::Variant* ProxyState_UserData::_internal_add_variant() {
  return variant_.Add();
}
inline ::paraview_protobuf::Variant* ProxyState_UserData::add_variant() {
  // @@protoc_insertion_point(field_add:paraview_protobuf.ProxyState.UserData.variant)
  return _internal_add_variant();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::Variant >&
ProxyState_UserData::variant() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.ProxyState.UserData.variant)
  return variant_;
}

// -------------------------------------------------------------------

// ProxyState_Property

// required string name = 1;
inline bool ProxyState_Property::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyState_Property::has_name() const {
  return _internal_has_name();
}
inline void ProxyState_Property::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyState_Property::name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.Property.name)
  return _internal_name();
}
inline void ProxyState_Property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyState.Property.name)
}
inline std::string* ProxyState_Property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.Property.name)
  return _internal_mutable_name();
}
inline const std::string& ProxyState_Property::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProxyState_Property::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyState_Property::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyState.Property.name)
}
inline void ProxyState_Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyState.Property.name)
}
inline void ProxyState_Property::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyState.Property.name)
}
inline std::string* ProxyState_Property::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyState_Property::release_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.Property.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyState_Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.Property.name)
}

// optional .paraview_protobuf.Variant value = 2;
inline bool ProxyState_Property::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool ProxyState_Property::has_value() const {
  return _internal_has_value();
}
inline void ProxyState_Property::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paraview_protobuf::Variant& ProxyState_Property::_internal_value() const {
  const ::paraview_protobuf::Variant* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::paraview_protobuf::Variant*>(
      &::paraview_protobuf::_Variant_default_instance_);
}
inline const ::paraview_protobuf::Variant& ProxyState_Property::value() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.Property.value)
  return _internal_value();
}
inline ::paraview_protobuf::Variant* ProxyState_Property::release_value() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyState.Property.value)
  _has_bits_[0] &= ~0x00000002u;
  ::paraview_protobuf::Variant* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::paraview_protobuf::Variant* ProxyState_Property::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::paraview_protobuf::Variant>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::paraview_protobuf::Variant* ProxyState_Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.Property.value)
  return _internal_mutable_value();
}
inline void ProxyState_Property::set_allocated_value(::paraview_protobuf::Variant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyState.Property.value)
}

// repeated .paraview_protobuf.ProxyState.UserData user_data = 3;
inline int ProxyState_Property::_internal_user_data_size() const {
  return user_data_.size();
}
inline int ProxyState_Property::user_data_size() const {
  return _internal_user_data_size();
}
inline void ProxyState_Property::clear_user_data() {
  user_data_.Clear();
}
inline ::paraview_protobuf::ProxyState_UserData* ProxyState_Property::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyState.Property.user_data)
  return user_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::ProxyState_UserData >*
ProxyState_Property::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:paraview_protobuf.ProxyState.Property.user_data)
  return &user_data_;
}
inline const ::paraview_protobuf::ProxyState_UserData& ProxyState_Property::_internal_user_data(int index) const {
  return user_data_.Get(index);
}
inline const ::paraview_protobuf::ProxyState_UserData& ProxyState_Property::user_data(int index) const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyState.Property.user_data)
  return _internal_user_data(index);
}
inline ::paraview_protobuf::ProxyState_UserData* ProxyState_Property::_internal_add_user_data() {
  return user_data_.Add();
}
inline ::paraview_protobuf::ProxyState_UserData* ProxyState_Property::add_user_data() {
  // @@protoc_insertion_point(field_add:paraview_protobuf.ProxyState.Property.user_data)
  return _internal_add_user_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paraview_protobuf::ProxyState_UserData >&
ProxyState_Property::user_data() const {
  // @@protoc_insertion_point(field_list:paraview_protobuf.ProxyState.Property.user_data)
  return user_data_;
}

// -------------------------------------------------------------------

// ProxyState

// -------------------------------------------------------------------

// PXMRegistrationState_Entry

// optional string group = 1;
inline bool PXMRegistrationState_Entry::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PXMRegistrationState_Entry::has_group() const {
  return _internal_has_group();
}
inline void PXMRegistrationState_Entry::clear_group() {
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PXMRegistrationState_Entry::group() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.PXMRegistrationState.Entry.group)
  return _internal_group();
}
inline void PXMRegistrationState_Entry::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.PXMRegistrationState.Entry.group)
}
inline std::string* PXMRegistrationState_Entry::mutable_group() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.PXMRegistrationState.Entry.group)
  return _internal_mutable_group();
}
inline const std::string& PXMRegistrationState_Entry::_internal_group() const {
  return group_.GetNoArena();
}
inline void PXMRegistrationState_Entry::_internal_set_group(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PXMRegistrationState_Entry::set_group(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.PXMRegistrationState.Entry.group)
}
inline void PXMRegistrationState_Entry::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.PXMRegistrationState.Entry.group)
}
inline void PXMRegistrationState_Entry::set_group(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.PXMRegistrationState.Entry.group)
}
inline std::string* PXMRegistrationState_Entry::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000001u;
  return group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PXMRegistrationState_Entry::release_group() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.PXMRegistrationState.Entry.group)
  if (!_internal_has_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return group_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PXMRegistrationState_Entry::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.PXMRegistrationState.Entry.group)
}

// required string name = 2;
inline bool PXMRegistrationState_Entry::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PXMRegistrationState_Entry::has_name() const {
  return _internal_has_name();
}
inline void PXMRegistrationState_Entry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PXMRegistrationState_Entry::name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.PXMRegistrationState.Entry.name)
  return _internal_name();
}
inline void PXMRegistrationState_Entry::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.PXMRegistrationState.Entry.name)
}
inline std::string* PXMRegistrationState_Entry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.PXMRegistrationState.Entry.name)
  return _internal_mutable_name();
}
inline const std::string& PXMRegistrationState_Entry::_internal_name() const {
  return name_.GetNoArena();
}
inline void PXMRegistrationState_Entry::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PXMRegistrationState_Entry::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.PXMRegistrationState.Entry.name)
}
inline void PXMRegistrationState_Entry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.PXMRegistrationState.Entry.name)
}
inline void PXMRegistrationState_Entry::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.PXMRegistrationState.Entry.name)
}
inline std::string* PXMRegistrationState_Entry::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PXMRegistrationState_Entry::release_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.PXMRegistrationState.Entry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PXMRegistrationState_Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.PXMRegistrationState.Entry.name)
}

// required uint64 global_id = 3;
inline bool PXMRegistrationState_Entry::_internal_has_global_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PXMRegistrationState_Entry::has_global_id() const {
  return _internal_has_global_id();
}
inline void PXMRegistrationState_Entry::clear_global_id() {
  global_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PXMRegistrationState_Entry::_internal_global_id() const {
  return global_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PXMRegistrationState_Entry::global_id() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.PXMRegistrationState.Entry.global_id)
  return _internal_global_id();
}
inline void PXMRegistrationState_Entry::_internal_set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  global_id_ = value;
}
inline void PXMRegistrationState_Entry::set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_global_id(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.PXMRegistrationState.Entry.global_id)
}

// -------------------------------------------------------------------

// PXMRegistrationState

// -------------------------------------------------------------------

// ProxyDefinitionState_ProxyXMLDefinition

// required string group = 1;
inline bool ProxyDefinitionState_ProxyXMLDefinition::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProxyDefinitionState_ProxyXMLDefinition::has_group() const {
  return _internal_has_group();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::clear_group() {
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::group() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
  return _internal_group();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::mutable_group() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
  return _internal_mutable_group();
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::_internal_group() const {
  return group_.GetNoArena();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::_internal_set_group(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_group(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_group(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000001u;
  return group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::release_group() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
  if (!_internal_has_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return group_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.group)
}

// required string name = 2;
inline bool ProxyDefinitionState_ProxyXMLDefinition::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProxyDefinitionState_ProxyXMLDefinition::has_name() const {
  return _internal_has_name();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
  return _internal_name();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
  return _internal_mutable_name();
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::release_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.name)
}

// required string xml = 3;
inline bool ProxyDefinitionState_ProxyXMLDefinition::_internal_has_xml() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProxyDefinitionState_ProxyXMLDefinition::has_xml() const {
  return _internal_has_xml();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::clear_xml() {
  xml_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::xml() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
  return _internal_xml();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_xml(const std::string& value) {
  _internal_set_xml(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::mutable_xml() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
  return _internal_mutable_xml();
}
inline const std::string& ProxyDefinitionState_ProxyXMLDefinition::_internal_xml() const {
  return xml_.GetNoArena();
}
inline void ProxyDefinitionState_ProxyXMLDefinition::_internal_set_xml(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_xml(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  xml_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_xml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_xml(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::_internal_mutable_xml() {
  _has_bits_[0] |= 0x00000004u;
  return xml_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyDefinitionState_ProxyXMLDefinition::release_xml() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
  if (!_internal_has_xml()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return xml_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyDefinitionState_ProxyXMLDefinition::set_allocated_xml(std::string* xml) {
  if (xml != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xml_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xml);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ProxyDefinitionState.ProxyXMLDefinition.xml)
}

// -------------------------------------------------------------------

// ProxyDefinitionState

// -------------------------------------------------------------------

// PullRequest

// -------------------------------------------------------------------

// ProxySelectionModelState

// -------------------------------------------------------------------

// LinkState_LinkDescription

// required uint32 proxy = 1;
inline bool LinkState_LinkDescription::_internal_has_proxy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkState_LinkDescription::has_proxy() const {
  return _internal_has_proxy();
}
inline void LinkState_LinkDescription::clear_proxy() {
  proxy_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkState_LinkDescription::_internal_proxy() const {
  return proxy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkState_LinkDescription::proxy() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.LinkState.LinkDescription.proxy)
  return _internal_proxy();
}
inline void LinkState_LinkDescription::_internal_set_proxy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  proxy_ = value;
}
inline void LinkState_LinkDescription::set_proxy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proxy(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.LinkState.LinkDescription.proxy)
}

// optional string property_name = 2;
inline bool LinkState_LinkDescription::_internal_has_property_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkState_LinkDescription::has_property_name() const {
  return _internal_has_property_name();
}
inline void LinkState_LinkDescription::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkState_LinkDescription::property_name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.LinkState.LinkDescription.property_name)
  return _internal_property_name();
}
inline void LinkState_LinkDescription::set_property_name(const std::string& value) {
  _internal_set_property_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.LinkState.LinkDescription.property_name)
}
inline std::string* LinkState_LinkDescription::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.LinkState.LinkDescription.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& LinkState_LinkDescription::_internal_property_name() const {
  return property_name_.GetNoArena();
}
inline void LinkState_LinkDescription::_internal_set_property_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinkState_LinkDescription::set_property_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.LinkState.LinkDescription.property_name)
}
inline void LinkState_LinkDescription::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  property_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.LinkState.LinkDescription.property_name)
}
inline void LinkState_LinkDescription::set_property_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.LinkState.LinkDescription.property_name)
}
inline std::string* LinkState_LinkDescription::_internal_mutable_property_name() {
  _has_bits_[0] |= 0x00000001u;
  return property_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinkState_LinkDescription::release_property_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.LinkState.LinkDescription.property_name)
  if (!_internal_has_property_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinkState_LinkDescription::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.LinkState.LinkDescription.property_name)
}

// required .paraview_protobuf.LinkState.LinkDescription.Direction direction = 3;
inline bool LinkState_LinkDescription::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinkState_LinkDescription::has_direction() const {
  return _internal_has_direction();
}
inline void LinkState_LinkDescription::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::paraview_protobuf::LinkState_LinkDescription_Direction LinkState_LinkDescription::_internal_direction() const {
  return static_cast< ::paraview_protobuf::LinkState_LinkDescription_Direction >(direction_);
}
inline ::paraview_protobuf::LinkState_LinkDescription_Direction LinkState_LinkDescription::direction() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.LinkState.LinkDescription.direction)
  return _internal_direction();
}
inline void LinkState_LinkDescription::_internal_set_direction(::paraview_protobuf::LinkState_LinkDescription_Direction value) {
  assert(::paraview_protobuf::LinkState_LinkDescription_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  direction_ = value;
}
inline void LinkState_LinkDescription::set_direction(::paraview_protobuf::LinkState_LinkDescription_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.LinkState.LinkDescription.direction)
}

// -------------------------------------------------------------------

// LinkState

// -------------------------------------------------------------------

// MousePointer

// -------------------------------------------------------------------

// ChartViewBounds

// -------------------------------------------------------------------

// ClientsInformation_ClientInfo

// required uint32 user = 1;
inline bool ClientsInformation_ClientInfo::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_user() const {
  return _internal_has_user();
}
inline void ClientsInformation_ClientInfo::clear_user() {
  user_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientsInformation_ClientInfo::_internal_user() const {
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientsInformation_ClientInfo::user() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.user)
  return _internal_user();
}
inline void ClientsInformation_ClientInfo::_internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_ = value;
}
inline void ClientsInformation_ClientInfo::set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.user)
}

// optional string name = 2;
inline bool ClientsInformation_ClientInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_name() const {
  return _internal_has_name();
}
inline void ClientsInformation_ClientInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientsInformation_ClientInfo::name() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.name)
  return _internal_name();
}
inline void ClientsInformation_ClientInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.name)
}
inline std::string* ClientsInformation_ClientInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paraview_protobuf.ClientsInformation.ClientInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ClientsInformation_ClientInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClientsInformation_ClientInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientsInformation_ClientInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:paraview_protobuf.ClientsInformation.ClientInfo.name)
}
inline void ClientsInformation_ClientInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paraview_protobuf.ClientsInformation.ClientInfo.name)
}
inline void ClientsInformation_ClientInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paraview_protobuf.ClientsInformation.ClientInfo.name)
}
inline std::string* ClientsInformation_ClientInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientsInformation_ClientInfo::release_name() {
  // @@protoc_insertion_point(field_release:paraview_protobuf.ClientsInformation.ClientInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientsInformation_ClientInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:paraview_protobuf.ClientsInformation.ClientInfo.name)
}

// optional bool is_master = 3 [default = false];
inline bool ClientsInformation_ClientInfo::_internal_has_is_master() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_is_master() const {
  return _internal_has_is_master();
}
inline void ClientsInformation_ClientInfo::clear_is_master() {
  is_master_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ClientsInformation_ClientInfo::_internal_is_master() const {
  return is_master_;
}
inline bool ClientsInformation_ClientInfo::is_master() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.is_master)
  return _internal_is_master();
}
inline void ClientsInformation_ClientInfo::_internal_set_is_master(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_master_ = value;
}
inline void ClientsInformation_ClientInfo::set_is_master(bool value) {
  _internal_set_is_master(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.is_master)
}

// optional bool follow_cam = 4 [default = false];
inline bool ClientsInformation_ClientInfo::_internal_has_follow_cam() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_follow_cam() const {
  return _internal_has_follow_cam();
}
inline void ClientsInformation_ClientInfo::clear_follow_cam() {
  follow_cam_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ClientsInformation_ClientInfo::_internal_follow_cam() const {
  return follow_cam_;
}
inline bool ClientsInformation_ClientInfo::follow_cam() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.follow_cam)
  return _internal_follow_cam();
}
inline void ClientsInformation_ClientInfo::_internal_set_follow_cam(bool value) {
  _has_bits_[0] |= 0x00000008u;
  follow_cam_ = value;
}
inline void ClientsInformation_ClientInfo::set_follow_cam(bool value) {
  _internal_set_follow_cam(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.follow_cam)
}

// optional bool disable_further_connections = 5 [default = false];
inline bool ClientsInformation_ClientInfo::_internal_has_disable_further_connections() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_disable_further_connections() const {
  return _internal_has_disable_further_connections();
}
inline void ClientsInformation_ClientInfo::clear_disable_further_connections() {
  disable_further_connections_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClientsInformation_ClientInfo::_internal_disable_further_connections() const {
  return disable_further_connections_;
}
inline bool ClientsInformation_ClientInfo::disable_further_connections() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.disable_further_connections)
  return _internal_disable_further_connections();
}
inline void ClientsInformation_ClientInfo::_internal_set_disable_further_connections(bool value) {
  _has_bits_[0] |= 0x00000010u;
  disable_further_connections_ = value;
}
inline void ClientsInformation_ClientInfo::set_disable_further_connections(bool value) {
  _internal_set_disable_further_connections(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.disable_further_connections)
}

// optional uint32 connect_id = 6 [default = 0];
inline bool ClientsInformation_ClientInfo::_internal_has_connect_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientsInformation_ClientInfo::has_connect_id() const {
  return _internal_has_connect_id();
}
inline void ClientsInformation_ClientInfo::clear_connect_id() {
  connect_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientsInformation_ClientInfo::_internal_connect_id() const {
  return connect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientsInformation_ClientInfo::connect_id() const {
  // @@protoc_insertion_point(field_get:paraview_protobuf.ClientsInformation.ClientInfo.connect_id)
  return _internal_connect_id();
}
inline void ClientsInformation_ClientInfo::_internal_set_connect_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  connect_id_ = value;
}
inline void ClientsInformation_ClientInfo::set_connect_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connect_id(value);
  // @@protoc_insertion_point(field_set:paraview_protobuf.ClientsInformation.ClientInfo.connect_id)
}

// -------------------------------------------------------------------

// ClientsInformation

// -------------------------------------------------------------------

// ChatMessage

// -------------------------------------------------------------------

// QtEvent

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace paraview_protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::paraview_protobuf::Variant_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paraview_protobuf::Variant_Type>() {
  return ::paraview_protobuf::Variant_Type_descriptor();
}
template <> struct is_proto_enum< ::paraview_protobuf::LinkState_LinkDescription_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paraview_protobuf::LinkState_LinkDescription_Direction>() {
  return ::paraview_protobuf::LinkState_LinkDescription_Direction_descriptor();
}
template <> struct is_proto_enum< ::paraview_protobuf::MousePointer_Ratio> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paraview_protobuf::MousePointer_Ratio>() {
  return ::paraview_protobuf::MousePointer_Ratio_descriptor();
}
template <> struct is_proto_enum< ::paraview_protobuf::QtEvent_QtEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paraview_protobuf::QtEvent_QtEventType>() {
  return ::paraview_protobuf::QtEvent_QtEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vtkPVMessage_2eproto
